name: Docker CI/CD Pipeline with SonarCloud

on:
  push:
    branches: [ main ]  # Déclenche le workflow sur chaque push vers main
    tags:
      - 'v*.*.*'  # Déclenche aussi le workflow pour les tags de version
  pull_request:
    branches: [ main ]

# Permissions nécessaires pour les actions de sécurité
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Nécessaire pour l'analyse des PR
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          
      - name: Affichage du job SonarCloud
        run: |
          echo "=========================================="
          echo "L'analyse SonarCloud est terminée"
          echo "Vérifiez les résultats sur SonarCloud.io"
          echo "=========================================="
          sleep 10

  owasp-dependency-check:
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Intégration OWASP Dependency-Check pour le backend
      - name: OWASP Dependency-Check Backend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'backend'
          path: './backendd'
          format: 'HTML'
          out: './reports/backend-dependency-check'
          args: >
            --enableRetired
            --enableExperimental
            
      # Intégration OWASP Dependency-Check pour le frontend
      - name: OWASP Dependency-Check Frontend
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'frontend'
          path: './TechnoMstr'
          format: 'HTML'
          out: './reports/frontend-dependency-check'
          args: >
            --enableRetired
            --enableExperimental
            
      # Publication des rapports OWASP comme artefacts
      - name: Upload OWASP Dependency-Check reports
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-reports
          path: './reports'

  security-scan:
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Build Backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backendd
          push: false
          load: true
          tags: stage-backend:scan
      
      - name: Build Frontend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./TechnoMstr
          push: false
          load: true
          tags: stage-frontend:scan
      
      - name: Run Trivy vulnerability scanner on Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: stage-backend:scan
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: Run Trivy vulnerability scanner on Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: stage-frontend:scan
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

  build-and-push:
    runs-on: ubuntu-latest
    # Ne construit et pousse l'image que pour les tags ou les PR mergeant vers main
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [sonarcloud-analysis, security-scan]  # Assure que l'analyse et le scan sont terminés avant de pousser
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/')
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backendd
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/stage-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/stage-backend:${{ steps.get_version.outputs.VERSION }}
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./TechnoMstr
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/stage-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/stage-frontend:${{ steps.get_version.outputs.VERSION }}
